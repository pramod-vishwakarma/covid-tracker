{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","api/index.js","Components/Charts/Charts.js","Components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","Components/Charts/Charts.module.css","Components/CountryPicker/CountryPicker.module.css","images/corona.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","ChangeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handelCountryChange","fetchedCountries","setFetchedCountries","FormControl","fromControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fe25a92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__EZ92e\",\"card\":\"Cards_card__15chx\",\"infected\":\"Cards_infected__hiuFH\",\"recovered\":\"Cards_recovered__swfWR\",\"deaths\":\"Cards_deaths__2lvgY\"};","import React from 'react';\r\nimport {Card,Typography,CardContent,Grid} from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport cx from \"classnames\";\r\nimport  styles  from './Cards.module.css';\r\nconst Cards =({data: {confirmed,recovered,deaths,lastUpdate}}) => {\r\n    // console.log(props);\r\n    if(!confirmed){\r\n        return \"loading....\";\r\n    }\r\n    return(\r\n        <div className=\"container\">\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected,)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/> \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered,)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recoverd\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"> <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from Covid-19</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths,)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"> <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths Causes by Covid-19</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let ChangeableUrl = url;\r\n    if(country) \r\n    {\r\n        ChangeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data : {confirmed,recovered,deaths,lastUpdate}} = await axios.get(ChangeableUrl);\r\n         return { confirmed,recovered,deaths,lastUpdate};\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n    \r\n}\r\n\r\nexport const fetchDailyData = async () =>\r\n{\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        // console.log(data);\r\n        const modifiedData = data.map((dailyData) => (\r\n            {\r\n                confirmed:dailyData.confirmed.total,\r\n                deaths:dailyData.deaths.total,\r\n                date:dailyData.reportDate,\r\n            }\r\n        ));\r\n        return modifiedData;\r\n    }catch (error)\r\n    {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    }catch (error)\r\n     {\r\n        console.log(error);\r\n    \r\n}\r\n}","import React, {useState,useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line , Bar } from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({data:{confirmed,recovered,deaths},country}) => {\r\n    const [dailyData, setDailyData]= useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI= async () => {\r\n            setDailyData(await fetchDailyData());\r\n          }\r\n        //   console.log(dailyData);\r\n          fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n         <Line\r\n          data={{\r\n            labels: dailyData.map(({date}) => date),\r\n            datasets:[{\r\n                data: dailyData.map(({confirmed}) => confirmed),\r\n                label: 'infected',\r\n                borderColor: '#3333ff',\r\n                fill: 'true',\r\n            },{\r\n                data: dailyData.map(({deaths}) => deaths),\r\n                label: 'deaths',\r\n                borderColor: 'red',\r\n                backgroundColor:'rgba(255,0,0,0.5)',\r\n                fill: 'true',\r\n            }],\r\n\r\n        }}\r\n      />\r\n      ): null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n                data={{\r\n                    labels : ['Infected' , 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label : 'People',\r\n                        backgroundColor: ['rgb(0,0,255)','rgb(0,255,0)','rgb(255,0,0)',],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n                    }],\r\n                }}\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{display:true, text:`Current state is ${country}`},\r\n                }}\r\n            />\r\n        ): null\r\n    );\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart: lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Charts;","import React, {useState,useEffect}from 'react';\r\nimport{NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker=({handelCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries]= useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    // console.log(fetchCountries);\r\n    return(\r\n        <FormControl className={styles.fromControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handelCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}> {country} </option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\n// import logo from './logo.svg';\nimport Cards from \"./Components/Cards/Cards\";\nimport Charts from \"./Components/Charts/Charts\";\nimport CountryPicker from \"./Components/CountryPicker/CountryPicker\";\nimport{ fetchData } from  './api/index';\nimport './App.css';\nimport coronaImage from \"./images/corona.png\";\n\nclass App extends React.Component{\n  state = {\n    data :{},\n    country:'',\n  }\n\n async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData});\n  }\n  handelCountryChange= async (country)=> {\n    const fetchedData = await fetchData(country);\n    this.setState({data:fetchedData, country:country});\n}\n  render(){\n    const {data,country} = this.state;\n  return (\n    <div className=\"container\">\n    <img className=\"image\" src={coronaImage} alt=\"covid-19\"/>\n      <Cards data={data}/>\n      <CountryPicker handelCountryChange={this.handelCountryChange}/>\n      <Charts data={data} country={country} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3x6-T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1lh0P\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}